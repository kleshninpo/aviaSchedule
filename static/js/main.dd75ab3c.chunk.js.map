{"version":3,"sources":["components/Choise.js","components/Table.js","getResTrsArr.js","App.js","serviceWorker.js","index.js"],"names":["Choise","state","buttonTextDeps","_this2","this","react_default","a","createElement","action","className","onClick","props","updateData","depsShow","setState","htmlFor","id","type","placeholder","onChange","ev","filterByFlight","target","value","toUpperCase","filterByPlane","Component","Table","dataDeps","dataArrs","neededFlight","neededPlane","_this","flight","plane","axios","method","url","then","response","data","catch","error","console","log","_this3","components_Choise","bind","numbers","planes","from","to","statuses","dataArr","resTrsArr","forEach","push","_loop","i","trArr","arr","length","getResTrsArr","map","item","App","components_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAqCeA,6MAjCXC,MAAQ,CACJC,gBAAgB,2EAEV,IAAAC,EAAAC,KACN,OACQC,EAAAC,EAAAC,cAAA,QAAMC,OAAO,IAAIC,UAAW,UACxBJ,EAAAC,EAAAC,cAAA,UAAQG,QAAS,WACbP,EAAKQ,MAAMC,WAAWT,EAAKF,MAAMY,UACjCV,EAAKW,SAAS,CAACZ,gBAAiBC,EAAKF,MAAMC,mBAE1CE,KAAKH,MAAMC,eAAiB,eAAiB,mBAElDG,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,SAAOQ,QAAQ,iBAAf,uCACAV,EAAAC,EAAAC,cAAA,SAAOS,GAAI,eAAgBC,KAAK,OAAOC,YAAa,iBAAkBC,SAClE,SAACC,GACGjB,EAAKQ,MAAMU,eAAeD,EAAGE,OAAOC,MAAMC,mBAItDnB,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,SAAOQ,QAAQ,gBAAf,yCACAV,EAAAC,EAAAC,cAAA,SAAOS,GAAI,cAAeC,KAAK,OAAOC,YAAa,gBAAiBC,SAChE,SAACC,GACGjB,EAAKQ,MAAMc,cAAcL,EAAGE,OAAOC,MAAMC,2BAzBpDE,aCmFNC,6MA/EX1B,MAAQ,CACJ2B,SAAU,GACVC,SAAU,GACVhB,UAAU,EACViB,aAAc,GACdC,YAAa,MAGjBnB,WAAa,WACToB,EAAKlB,SAAS,CAACD,UAAWmB,EAAK/B,MAAMY,cAEzCQ,eAAiB,SAACY,GACdD,EAAKlB,SAAS,CAACgB,aAAcG,OAEjCR,cAAgB,SAACS,GACbF,EAAKlB,SAAS,CAACiB,YAAaG,wFAEZ,IAAA/B,EAAAC,KAChB+B,IAAM,CACFC,OAAQ,MACRC,IAAK,8EAEJC,KAAK,SAAAC,GACFpC,EAAKW,SAAS,CAACc,SAAUW,EAASC,SAErCC,MAAM,SAAAC,GACHC,QAAQC,IAAIF,KAEpBP,IAAM,CACFC,OAAQ,MACRC,IAAK,8EAEJC,KAAK,SAAAC,GACFpC,EAAKW,SAAS,CAACe,SAAUU,EAASC,SAErCC,MAAM,SAAAC,GACHC,QAAQC,IAAIF,sCAGf,IAAAG,EAAAzC,KACL,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACuC,EAAD,CAAQlC,WAAYR,KAAKQ,WAAWmC,KAAK3C,MACjCiB,eAAgBjB,KAAKiB,eAAe0B,KAAK3C,MACzCqB,cAAerB,KAAKqB,cAAcsB,KAAK3C,QAE/CC,EAAAC,EAAAC,cAAA,UAAKH,KAAKH,MAAMY,SAAW,aAAe,WAC1CR,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,qBC3DT,SAACiC,GACZ,IAAIQ,EAAU,GACVC,EAAS,GACTC,EAAO,GACPC,EAAK,GACLC,EAAW,GACXC,EAAU,GACVC,EAAY,GAEZd,EAAKe,SACLf,EAAKe,QAAQ,SAAAtB,GACTA,EAAM,OAAN,WAAiCe,EAAQQ,KAAKvB,EAAM,OAAN,YAAkCe,EAAQQ,KAAK,kBAC7FvB,EAAM,SAAN,SAAiCgB,EAAOO,KAAKvB,EAAM,SAAN,UAAkCgB,EAAOO,KAAK,kBAC3FvB,EAAM,UAAN,SAAkCiB,EAAKM,KAAKvB,EAAM,UAAN,UAAmCiB,EAAKM,KAAK,kBACzFL,EAAGK,KAAKvB,EAAM,QAAN,UACRmB,EAASI,KAAKvB,EAAM,UAI5BoB,EAAQG,KAAKR,EAASC,EAAQC,EAAMC,EAAIC,GAExC,IArBqB,IAAAK,EAAA,SAqBZC,GACL,IAAIC,EAAQ,GACZN,EAAQE,QAAQ,SAAAK,GAAG,OAAID,EAAMH,KAAKI,EAAIF,MACtCJ,EAAUE,KAAKG,IAHVD,EAAI,EAAGA,EAAIV,EAAQa,OAAQH,IAAKD,EAAhCC,GAKT,OAAOJ,EDoCaQ,CAAa1D,KAAKH,MAAMY,SAAWT,KAAKH,MAAM2B,SAAWxB,KAAKH,MAAM4B,UAC/DkC,IAAI,SAAAH,GACD,OAAIA,EAAI,KAAOf,EAAK5C,MAAM6B,aACfzB,EAAAC,EAAAC,cAAA,MAAIE,UAAW,eACjBmD,EAAIG,IAAI,SAAAC,GAAI,OAAI3D,EAAAC,EAAAC,cAAA,UAAKyD,MAEnBJ,EAAI,KAAOf,EAAK5C,MAAM8B,YACtB1B,EAAAC,EAAAC,cAAA,MAAIE,UAAW,eACjBmD,EAAIG,IAAI,SAAAC,GAAI,OAAI3D,EAAAC,EAAAC,cAAA,UAAKyD,MAEf3D,EAAAC,EAAAC,cAAA,UACVqD,EAAIG,IAAI,SAAAC,GAAI,OAAI3D,EAAAC,EAAAC,cAAA,UAAKyD,kBArEtCtC,aESLuC,mLARX,OACI5D,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAC2D,EAAD,cAJMxC,aCOEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.dd75ab3c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../App.css';\n\nclass Choise extends Component {\n    state = {\n        buttonTextDeps: true,\n    };\n    render () {\n        return (\n                <form action=\"#\" className={'choise'}>\n                    <button onClick={() => {\n                        this.props.updateData(this.state.depsShow);\n                        this.setState({buttonTextDeps: !this.state.buttonTextDeps})\n                    }}>\n                        {this.state.buttonTextDeps ? 'Show Arrives' : 'Show Departures'}\n                    </button>\n                    <section>\n                        <label htmlFor=\"#flightFilter\">Enter the number of flight you need</label>\n                        <input id={'flightFilter'} type=\"text\" placeholder={'example: SU504'} onChange={\n                            (ev) => {\n                                this.props.filterByFlight(ev.target.value.toUpperCase());\n                            }\n                        }/>\n                    </section>\n                    <section>\n                        <label htmlFor=\"#planeFilter\">Enter the IATA code of plane you need</label>\n                        <input id={'planeFilter'} type=\"text\" placeholder={'example: A320'} onChange={\n                            (ev) => {\n                                this.props.filterByPlane(ev.target.value.toUpperCase());\n                            }\n                        }/>\n                    </section>\n                </form>\n        )\n    }\n}\n\nexport default Choise;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport Choise from './Choise.js';\nimport getResTrsArr from '../getResTrsArr.js';\n\nclass Table extends Component {\n    state = {\n        dataDeps: '',\n        dataArrs: '',\n        depsShow: true,\n        neededFlight: '',\n        neededPlane: ''\n    };\n\n    updateData = () => {\n        this.setState({depsShow: !this.state.depsShow})\n    };\n    filterByFlight = (flight) => {\n        this.setState({neededFlight: flight})\n    };\n    filterByPlane = (plane) => {\n        this.setState({neededPlane: plane})\n    };\n    componentDidMount() {\n        axios({\n            method: 'get',\n            url: 'https://aviation-edge.com/v2/public/flights?key=c481d7-fca75d&depIata=SVO',\n        })\n            .then(response => {\n                this.setState({dataDeps: response.data});\n            })\n            .catch(error => {\n                console.log(error)\n            });\n        axios({\n            method: 'get',\n            url: 'https://aviation-edge.com/v2/public/flights?key=c481d7-fca75d&arrIata=SVO'\n        })\n            .then(response => {\n                this.setState({dataArrs: response.data});\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n    render() {\n        return (\n            <div>\n                <Choise updateData={this.updateData.bind(this)}\n                        filterByFlight={this.filterByFlight.bind(this)}\n                        filterByPlane={this.filterByPlane.bind(this)}\n                />\n                <h1>{this.state.depsShow ? 'Departures' : 'Arrives'}</h1>\n                <table>\n                    <tbody>\n                    <tr>\n                        <th>Number</th>\n                        <th>Plane</th>\n                        <th>From</th>\n                        <th>To</th>\n                        <th>Status</th>\n                    </tr>\n                    {\n                        getResTrsArr(this.state.depsShow ? this.state.dataDeps : this.state.dataArrs)\n                            .map(arr => {\n                                if (arr[0] === this.state.neededFlight) {\n                                    return <tr className={'selectedTr1'}>\n                                        {arr.map(item => <td>{item}</td>)}\n                                    </tr>\n                                } else if (arr[1] === this.state.neededPlane) {\n                                    return <tr className={'selectedTr2'}>\n                                        {arr.map(item => <td>{item}</td>)}\n                                    </tr>\n                                } else  return <tr>\n                                    {arr.map(item => <td>{item}</td>)}\n                                </tr>\n                            })\n                    }\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Table;","import React from 'react';\n\nexport default (data) => {\n    let numbers = [],\n        planes = [],\n        from = [],\n        to = [],\n        statuses = [],\n        dataArr = [],\n        resTrsArr = [];\n\n    if (data.forEach) {\n        data.forEach(flight => {\n            flight['flight']['iataNumber'] ? numbers.push(flight['flight']['iataNumber']) : numbers.push('no information');\n            flight['aircraft']['iataCode'] ? planes.push(flight['aircraft']['iataCode']) : planes.push('no information');\n            flight['departure']['iataCode'] ? from.push(flight['departure']['iataCode']) : from.push('no information');\n            to.push(flight['arrival']['iataCode']);\n            statuses.push(flight['status']);\n        });\n    }\n\n    dataArr.push(numbers, planes, from, to, statuses);\n\n    for (let i = 0; i < numbers.length; i++) {\n        let trArr = [];\n        dataArr.forEach(arr => trArr.push(arr[i]));\n        resTrsArr.push(trArr);\n    }\n    return resTrsArr;\n}","import React, { Component } from 'react';\n\nimport './App.css';\nimport Table from \"./components/Table.js\";\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\" >\n            <Table/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}